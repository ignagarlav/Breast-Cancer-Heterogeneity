'''El modelo de scanvi está pensado para refinar el espacio latente generado por scvi. 
El objeto adata se espera que esté integrado por scvi y que haya sido anotado con el pipeline de General Anno

El pipeline completo scvi-scanvi se puede ver en 

https://docs.scvi-tools.org/en/stable/tutorials/notebooks/scrna/harmonization.html


Se espera que previamente se hayan ejecutado: 

1. SCPreprocessing (genera adata)
2. Before Integration (genera adata_normalized)

3. IntegrationScvi (genera adata_scvi)
4. GeneralAnnoBeforeScAnvi (genera adata_GenAnno)

This script IntegrationScAnvi is the 5th step of the pipeline. It refines the latent space generated by scvi using scanvi.


'''
import scanpy as sc
import scvi
import os
import torch
import numpy as np


print(f"Using torch version {torch.__version__}")
print(f"Using scvi version {scvi.__version__}")
print(f"CUDA: {torch.cuda.is_available()}")
print(f"CUDA version: {torch.version.cuda}")

if torch.cuda.is_available():
    accelerator = "gpu"
else:
    accelerator = "cpu"

torch.manual_seed(311224)

#################### Environment Variables ############################
DATA_DIR = os.getenv("DATA_DIR")
MODEL_DIR = os.getenv("MODEL_DIR")
CELLTYPE = os.getenv("CELL_TYPE") # cell type used as reference 
SCANVI_LATENT_KEY = "X_scANVI"

#################### Load Adata ############################
adata = sc.read_h5ad(os.path.join(DATA_DIR,"adata_GenAnno_allvars.h5ad"))
adata.obs[CELLTYPE] = adata.obs[CELLTYPE].astype('category')
print(f"Unique cell types: {adata.obs[CELLTYPE].cat.categories}")



##################### Load the model architecture ############################
scvi_ref_path = os.path.join(MODEL_DIR, "scvi_model_cuda_allvars")
model = scvi.model.SCVI.load(scvi_ref_path,adata)

# Create scanvi model from the scvi model
scanvi_model = scvi.model.SCANVI.from_scvi_model(model, 
                                      unlabeled_category="unknown",
                                      labels_key=CELLTYPE) 
# Train the model
scanvi_model.train(max_epochs=40, n_samples_per_label=100)

# Save scanvi model 
scanvi_ref_path = os.path.join(MODEL_DIR, "scanvi_model_cuda_allvars")
scanvi_model.save(scanvi_ref_path, overwrite=True)
print(f"Model saved in {scanvi_ref_path}")

##################### Transfer latent space to adata #############
adata.obsm[SCANVI_LATENT_KEY] = scanvi_model.get_latent_representation()
sc.pp.neighbors(adata, use_rep=SCANVI_LATENT_KEY)
sc.tl.leiden(adata)
sc.tl.umap(adata)

# Obtain batch normalized counts
corrected_data = scanvi_model.get_normalized_expression(transform_batch = sorted(adata.obs['batch'].unique()), library_size = 1e4)
corrected_data.iloc[:,:] = np.log1p(corrected_data.values)
adata.layers['scanvi_batch_corrected_counts'] = corrected_data

adata.write_h5ad(os.path.join(DATA_DIR,"adata_scanvi_cuda_allvars.h5ad"))
